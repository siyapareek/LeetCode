Set<String> uniqueSubstrings = new HashSet<>();
        // Start the backtracking process
        return backtrack(s, 0, uniqueSubstrings);
    }

    // Helper method for backtracking
    private int backtrack(String s, int start, Set<String> uniqueSubstrings) {
        // If we reach the end of the string, return 0 because no more splits are possible
        if (start == s.length()) {
            return 0;
        }

        int maxSplit = 0; // Variable to keep track of the maximum number of splits

        // Try splitting the string at every possible position
        for (int end = start + 1; end <= s.length(); end++) {
            // Get the current substring
            String substring = s.substring(start, end);
            
            // If this substring hasn't been used before
            if (!uniqueSubstrings.contains(substring)) {
                // Add it to the set
                uniqueSubstrings.add(substring);
                
                // Recursively split the rest of the string
                maxSplit = Math.max(maxSplit, 1 + backtrack(s, end, uniqueSubstrings));
                
                // Backtrack: remove the substring to try other splits
                uniqueSubstrings.remove(substring);
            }
        }

        return maxSplit; // Return the maximum number of unique splits
    }
}
